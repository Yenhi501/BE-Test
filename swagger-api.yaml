openapi: 3.0.0
info:
  description: |
    API Document for Movie Website
  version: '1.0.0'
  title: PBL6-Movie Website API
  contact:
    email: phucchp@gmail.com
servers:
  - url: 'http://localhost:8000/api'
tags:
  - name: movie
    description: API for Movies
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: episode
    description: API for Episode
  - name: genre
    description: API for Genre
  - name: home
    description: API for Home Page
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  /movies:
    get:
      tags:
        - movie
      summary: Get all movies or by filter
      description: Get and search movies API
      operationId: findPetsByStatus
      parameters:
        - name: search
          in: query
          description: Enter value to search by title and discription of movies
          required: false
          explode: true
          schema:
            type: string
        - name: isSeries
          in: query
          description: Filter by film series or one episode
          required: false
          explode: true
          schema:
            type: array
            items:
              type: boolean
              enum:
                - true
                - false
        - name: genre
          in: query
          description: Filter by genre movies, enter genre_id of movies(Current id from 1 to 20)
          required: false
          explode: true
          schema:
            type: number
        - name: nation
          in: query
          description: Filter by nation movies, enter movies of movies to filter
          required: false
          explode: true
          schema:
            type: string
        - name: year
          in: query
          description: Filter by year of release movies
          required: false
          explode: true
          schema:
            type: number
        - name: sort
          in: query
          description: Choose addition to sort
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - highFavorited
                - newest
                - highRated
        - name: sortBy
          in: query
          description: Default sort ASC, if you want change to DESC, select below
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - ASC
                - DESC
              default: ASC
        - name: page
          in: query
          description: Use to pagination, default page = 1
          required: false
          explode: true
          schema:
            type: number
        - name: pageSize
          in: query
          description: Use to pagination, default pageSize = 6
          required: false
          explode: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Khong the lay danh sach phim
    post:
      tags:
        - movie
      summary: Add a new movie (To do)
      operationId: addPet
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        $ref: '#/components/requestBodies/Pet'
    put:
      tags:
        - movie
      summary: Update an existing movie (To do)
      operationId: updatePet
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        $ref: '#/components/requestBodies/Pet'
    delete:
      tags:
        - movie
      summary: Deletes a movie by ID
      operationId: deleteMovie
      parameters:
        - name: id
          in: query
          description: Movie ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Movie deleted successfully
          content:
            application/json:
              example:
                status: true
                message: Delete successfully
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found

  '/movies/{id}':
    get:
      tags:
        - movie
      summary: Find Movie by ID
      description: Returns a single movie
      operationId: getMovieById
      parameters:
        - name: id
          in: path
          description: ID of movie to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found
      security:
        - api_key: []
    post:
      tags:
        - movie
      summary: Updates a movie with form data (To do)
      operationId: updateMovieWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
  '/movies/get/nations':
    get:
      tags:
        - movie
      summary: Get all nations
      description: Returns distinct nations of movies
      operationId: getAllNations
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found
      security:
        - api_key: []
  '/movies/get/years':
    get:
      tags:
        - movie
      summary: Get all release years
      description: Returns distinct release years of movies
      operationId: getAllReleaseYears
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found
      security:
        - api_key: []
  /episode/{id}:
    get:
      tags:
        - episode
      summary: Returns details episode of movie
      description: Returns details episode of movie
      parameters:
        - name: id
          in: path
          description: ID of episode to return
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []

<<<<<<< HEAD
=======
  /genres:
    get:
      tags:
        - genre
      summary: Returns all genres
      description: Returns genres
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
 
>>>>>>> ef8ff3eb5bb5f0f13b7c1c275eef169e8154be98
  /home:
    get:
      tags:
        - home
      summary: Get movies by genre
      description: Get list genres and movies of genre
      operationId: findMoviesByGenre
      parameters:
        - name: genreId
          in: query
          description: Enter value to search by title and discription of movies
          required: false
          explode: true
          schema:
            type: number
        - name: page
          in: query
          description: Use to pagination, default page = 1
          required: false
          explode: true
          schema:
            type: number
        - name: pageSize
          in: query
          description: Use to pagination, default pageSize = 6
          required: false
          explode: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Error while get movies by genres
  /movies/home/trending:
    get:
      tags:
        - home
      summary: Get movies trending
      description: Get moives trending for home
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Error while get movies trending

  /movies/home/recommend:
    get:
      tags:
        - home
      summary: Get movies recommender for user
      description: Get moives recommender for user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Error while get movies recommender

  /movies/home/upcoming:
    get:
      tags:
        - home
      summary: Get movies upcoming
      description: Get moives upcoming
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Error while get movies recommender

  /movies/home/vip:
    get:
      tags:
        - home
      summary: Get movies for user vip
      description: Get moives for user vip
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Error while get movies recommender
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Movie:
      type: object
      properties:
        movieId:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        releaseDate:
          type: string
          format: date-time
        nation:
          type: string
          format: string
        posterURL:
          type: string
          format: string
        trailerURL:
          type: string
          format: string
        backgroundURL:
          type: string
          format: string
        averageRating:
          type: number
        episodeNum:
          type: number
        level:
          type: number
          enum:
            - 0
            - 1
            - 2
            - 3
        isSeries:
          type: boolean
          default: false
        numFavorite:
          type: number
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header

  /user:
  /get-all-users:
    get:
      summary: Get all users
      responses:
        '200':
          description: Successful response

  /get-user:
    get:
      summary: Get user by username, email, or userId
      parameters:
        - name: username
          in: query
          description: Username of the user
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: Email of the user
          required: false
          schema:
            type: string
        - name: idUser
          in: query
          description: ID of the user
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /get-self-information:
    get:
      summary: Get information about the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response

  /update-user:
    put:
      summary: Update user information
      security:
        - bearerAuth: []
      requestBody:
        description: User data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful response

  /create-user:
    post:
      summary: Create a new user
      requestBody:
        description: User data for registration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '200':
          description: Successful response

  /delete-user:
    delete:
      summary: Delete a user by userId
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: query
          description: ID of the user to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /add-favorite-movie:
    get:
      summary: Add a movie to favorites
      security:
        - bearerAuth: []
      parameters:
        - name: movieId
          in: query
          description: ID of the movie to add to favorites
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /delete-favorite-movie:
    get:
      summary: Remove a movie from favorites
      security:
        - bearerAuth: []
      parameters:
        - name: movieId
          in: query
          description: ID of the movie to remove from favorites
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /get-favorite-movie-list:
    get:
      summary: Get the list of favorite movies
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Number of items per page
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /add-watch-list:
    get:
      summary: Add a movie to the watch list
      security:
        - bearerAuth: []
      parameters:
        - name: movieId
          in: query
          description: ID of the movie to add to the watch list
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /delete-watch-list:
    get:
      summary: Remove a movie from the watch list
      security:
        - bearerAuth: []
      parameters:
        - name: movieId
          in: query
          description: ID of the movie to remove from the watch list
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /get-watch-movie-list:
    get:
      summary: Get the list of movies in the watch list
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Number of items per page
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /add-movie-history:
    get:
      summary: Add a movie to the watch history
      security:
        - bearerAuth: []
      parameters:
        - name: episodeId
          in: query
          description: ID of the episode to add to watch history
          required: true
          schema:
            type: integer
        - name: duration
          in: query
          description: Duration of the watch
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /delete-movie-history:
    get:
      summary: Remove a movie from watch history
      security:
        - bearerAuth: []
      parameters:
        - name: episodeId
          in: query
          description: ID of the episode to remove from watch history
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /get-movie-history-list:
    get:
      summary: Get the list of movies in the watch history
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Number of items per page
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /get-movie-history:
    get:
      summary: Get the watch history for a specific movie
      security:
        - bearerAuth: []
      parameters:
        - name: movieId
          in: query
          description: ID of the movie to get watch history
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: integer
        email:
          type: string
        dateOfBirth:
          type: string
          format: date
        gender:
          type: string
          enum: [male, female, other]
        username:
          type: string
      required:
        - userId
        - email
        - date