openapi: 3.0.0
info:
  description: |
    API Document for Movie Website
  version: '1.0.0'
  title: PBL6-Movie Website API
  contact:
    email: phucchp@gmail.com
servers:
  - url: 'http://localhost:8000/api'
tags:
  - name: authentication
    description: API for Authentication
  - name: movie
    description: API for Movies
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: episode
    description: API for Episode
  - name: genre
    description: API for Genre
  - name: comment
    description: API for Comment
  - name: rating
    description: API for Rating
  - name: home
    description: API for Home Page
  - name: user
    description: Operations about user
  - name: subscription
    description: API for subscription
  - name: statistical
    description: API for statistical
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  /auth/login:
    post:
      summary: User login
      tags:
        - authentication
      requestBody:
        description: User credentials for login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /auth/register:
    post:
      summary: User registration
      tags:
        - authentication
      requestBody:
        description: User data for registration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '200':
          description: Successful response
        '500':
          description: Internal server error

  /auth/register-admin:
    post:
      summary: Admin registration
      tags:
        - authentication
      security:
        - bearerAuth: []
      requestBody:
        description: Admin data for registration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '200':
          description: Successful response
        '500':
          description: Internal server error

  /movies:
    get:
      tags:
        - movie
      summary: Get all movies or by filter
      description: Get and search movies API
      operationId: findPetsByStatus
      parameters:
        - name: search
          in: query
          description: Enter value to search by title and discription of movies
          required: false
          explode: true
          schema:
            type: string
        - name: isSeries
          in: query
          description: Filter by film series or one episode
          required: false
          explode: true
          schema:
            type: array
            items:
              type: boolean
              enum:
                - true
                - false
        - name: genre
          in: query
          description: Filter by genre movies, enter genre_id of movies(Current id from 1 to 20)
          required: false
          explode: true
          schema:
            type: number
        - name: nation
          in: query
          description: Filter by nation movies, enter movies of movies to filter
          required: false
          explode: true
          schema:
            type: string
        - name: year
          in: query
          description: Filter by year of release movies
          required: false
          explode: true
          schema:
            type: number
        - name: sort
          in: query
          description: Choose addition to sort
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - highFavorited
                - newest
                - highRated
        - name: sortBy
          in: query
          description: Default sort ASC, if you want change to DESC, select below
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - ASC
                - DESC
              default: ASC
        - name: page
          in: query
          description: Use to pagination, default page = 1
          required: false
          explode: true
          schema:
            type: number
        - name: pageSize
          in: query
          description: Use to pagination, default pageSize = 6
          required: false
          explode: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Khong the lay danh sach phim
    post:
      tags:
        - movie
      summary: Add a new movie
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  default: New Movie
                description:
                  type: string
                  default: Write description for new movie here
                releaseDate:
                  type: string
                  format: date-time
                nation:
                  type: string
                  default: Vietnam
                level:
                  type: number
                  format: int8
                  default: 1
                isSeries:
                  type: boolean
                  default: false
                actorIds:
                  type: array
                  items:
                    type: number
                  default: []
                directorIds:
                  type: array
                  items:
                    type: number
                  default: []
                genreIds:
                  type: array
                  items:
                    type: number
                  default: []
    delete:
      tags:
        - movie
      summary: Deletes a movie by ID
      operationId: deleteMovie
      parameters:
        - name: id
          in: query
          description: Movie ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Movie deleted successfully
          content:
            application/json:
              example:
                status: true
                message: Delete successfully
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found

  '/movies/{id}':
    get:
      tags:
        - movie
      summary: Find Movie by ID
      description: Returns a single movie
      operationId: getMovieById
      parameters:
        - name: id
          in: path
          description: ID of movie to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found
      security:
        - api_key: []
    put:
      tags:
        - movie
      summary: Updates a movie with form data
      operationId: updateMovieWithForm
      parameters:
        - name: id
          in: path
          description: ID of movie that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  default: New Movie
                description:
                  type: string
                  default: Write description for new movie here
                releaseDate:
                  type: string
                  format: date-time
                nation:
                  type: string
                  default: Vietnam
                level:
                  type: number
                  format: int8
                  default: 1
                isSeries:
                  type: boolean
                  default: false
                averageRating:
                  type: number
                  format: float
                  default: 0.0
                episode:
                  type: number
                  format: int8
                  default: 0
                numFavorite:
                  type: number
                  format: int8
                  default: 100
  '/movies/get/nations':
    get:
      tags:
        - movie
      summary: Get all nations
      description: Returns distinct nations of movies
      operationId: getAllNations
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found
      security:
        - api_key: []
  '/movies/get/years':
    get:
      tags:
        - movie
      summary: Get all release years
      description: Returns distinct release years of movies
      operationId: getAllReleaseYears
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found
      security:
        - api_key: []

  '/movies/movie-actor':
    delete:
      tags:
        - movie
      summary: Delete actors of movie
      description: Delete actors of movie by actorIds and movieId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movieId:
                  type: integer
                  format: int64
                  default: 1
                actorIds:
                  type: array
                  default: [1, 2, 3]
      responses:
        '200':
          description: successful
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found
      security:
        - api_key: []
    post:
      tags:
        - movie
      summary: Add actors for movie
      responses:
        '200':
          description: Successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movieId:
                  type: integer
                  format: int64
                  default: 1
                actorIds:
                  type: array
                  default: [1, 2, 3]
  '/movies/movie-director':
    delete:
      tags:
        - movie
      summary: Delete directors of movie
      description: Delete directors of movie by directorIds and movieId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movieId:
                  type: integer
                  format: int64
                  default: 1
                directorIds:
                  type: array
                  default: [1, 2, 3]
      responses:
        '200':
          description: successful
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found
      security:
        - api_key: []
    post:
      tags:
        - movie
      summary: Add actors for movie
      responses:
        '200':
          description: Successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movieId:
                  type: integer
                  format: int64
                  default: 1
                directorIds:
                  type: array
                  default: [1, 2, 3]
  '/movies/movie-genre':
    delete:
      tags:
        - movie
      summary: Delete genres of movie
      description: Delete genres of movie by genreIds and movieId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movieId:
                  type: integer
                  format: int64
                  default: 1
                genreIds:
                  type: array
                  default: [1, 2, 3]
      responses:
        '200':
          description: successful
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found
      security:
        - api_key: []
    post:
      tags:
        - movie
      summary: Add genres for movie
      responses:
        '200':
          description: Successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movieId:
                  type: integer
                  format: int64
                  default: 1
                genreIds:
                  type: array
                  default: [1, 2, 3]
  /movies/get/presign-url:
    get:
      tags:
        - movie
      summary: Returns presign url to upload movie to s3
      description: Returns presign url to upload movie to s3
      parameters:
        - name: movieId
          in: query
          description: ID of movie
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: option
          in: query
          required: true
          description: Option to get
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - onlyBackground
                - onlyPoster
                - onlyTrailer
                - posterAndBackground
                - all
      responses:
        '200':
          description: successful operation
      security:
        - api_key: []
  /episode/{id}:
    get:
      tags:
        - episode
      summary: Returns details episode of movie
      description: Returns details episode of movie
      parameters:
        - name: id
          in: path
          description: ID of episode to return
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []

  /episode/{id}/comments:
    get:
      tags:
        - episode
      summary: Returns comments of episode
      description: Returns comments of episode
      parameters:
        - name: id
          in: path
          description: ID of episode to return
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Use to pagination, default page = 1
          required: false
          explode: true
          schema:
            type: number
        - name: pageSize
          in: query
          description: Use to pagination, default pageSize = 10
          required: false
          explode: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []

  /episode/delete/{episodeId}:
    delete:
      tags:
        - episode
      summary: Delete episode
      description: Delete episode by id
      parameters:
        - name: episodeId
          in: path
          description: commentId to delete
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - bearerAuth: []

  /episode/create:
    post:
      tags:
        - episode
      summary: Add episode for movie
      description: Add episode for movie
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movieId:
                  type: integer
                  format: int64
                  default: 1
                title:
                  type: string
                  default: 'Tap 1'
                releaseDate:
                  type: string
                  format: date
                description:
                  type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - bearerAuth: []

  /episode/update/{episodeId}:
    put:
      tags:
        - episode
      summary: Update episode
      description: Update episode
      parameters:
        - name: episodeId
          in: path
          description: episodeId to update
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movieId:
                  type: integer
                  format: int64
                  default: 1
                title:
                  type: string
                  default: 'Tap 1'
                releaseDate:
                  type: string
                  format: date
                duration:
                  type: integer
                episodeNo:
                  type: integer
                description:
                  type: string
                  default: null
                numView:
                  type: integer
                posterURL:
                  type: string
                movieURL:
                  type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - bearerAuth: []
  /episode/presignURL/upload:
    get:
      tags:
        - episode
      summary: Returns presign url to upload movie to s3
      description: Returns presign url to upload movie to s3
      parameters:
        - name: movieId
          in: query
          description: ID of movie
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: episodeNum
          in: query
          required: true
          description: Number of episode of movie
          explode: true
          schema:
            type: number
        - name: option
          in: query
          required: true
          description: Option to get
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - onlyMovie
                - onlyPoster
                - movieAndPoster
      responses:
        '200':
          description: successful operation
      security:
        - api_key: []
  /genres:
    get:
      tags:
        - genre
      summary: Returns all genres
      description: Returns genres
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
    post:
      tags:
        - genre
      summary: Create new genre
      description: Create new genre
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object

      security:
        - api_key: []
    put:
      tags:
        - genre
      summary: Update genre information
      description: Update genre information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                genreId:
                  type: integer
                  format: int64
                name:
                  type: string
                  default: 'Name of genre to update'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
    delete:
      tags:
        - genre
      summary: Delete a genre
      description: Delete a genre by genreId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                genreId:
                  type: number
                  format: int64
                  default: 1
      responses:
        '204':
          description: successful
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /comments/create:
    post:
      tags:
        - comment
      summary: Add comment for episode
      description: Add comment for episode
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                episodeId:
                  type: integer
                  format: int64
                  default: 1
                content:
                  type: string
                  default: 'Add comment here'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - bearerAuth: []
  /comments/delete/{commentId}:
    delete:
      tags:
        - comment
      summary: Delete comment
      description: Delete comment by id
      parameters:
        - name: commentId
          in: path
          description: commentId to delete
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - bearerAuth: []
  /comments/edit/{commentId}:
    put:
      tags:
        - comment
      summary: Edit comment
      description: Edit comment
      parameters:
        - name: commentId
          in: path
          description: commentId to update
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  default: 'content to update'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - bearerAuth: []

  /comments/sub-comments/create:
    post:
      tags:
        - comment
      summary: Add sub comment for episode
      description: Add sub comment for episode
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                parentId:
                  type: integer
                  format: int64
                  default: 1
                content:
                  type: string
                  default: 'Add comment here'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - bearerAuth: []
  /comments/sub-comments/delete/{subCommentId}:
    delete:
      tags:
        - comment
      summary: Delete sub comment
      description: Delete sub comment by id
      parameters:
        - name: subCommentId
          in: path
          description: subCommentId to delete
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - bearerAuth: []
  /comments/sub-comments/edit/{subCommentId}:
    put:
      tags:
        - comment
      summary: Edit sub comment
      description: Edit sub comment
      parameters:
        - name: subCommentId
          in: path
          description: subCommentId to update
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  default: 'content to update'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - bearerAuth: []
  /ratings/create:
    post:
      tags:
        - rating
      summary: Add rating for movie
      description: Add rating for movie
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movieId:
                  type: integer
                  format: int64
                rating:
                  type: number
                  format: float
                  default: 5.0
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - bearerAuth: []
  /home/genres:
    get:
      tags:
        - home
      summary: Get movies by genre
      description: Get list genres and movies of genre
      operationId: findMoviesByGenre
      parameters:
        - name: page
          in: query
          description: Use to pagination, default page = 1
          required: false
          explode: true
          schema:
            type: number
        - name: pageSize
          in: query
          description: Use to pagination, default pageSize = 6
          required: false
          explode: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
        '400':
          description: Error while get movies by genres
  /home/posters:
    get:
      tags:
        - home
      summary: Get movie for home page
      description: Get movie for home page
      parameters:
        - name: page
          in: query
          description: Use to pagination, default page = 1
          required: false
          explode: true
          schema:
            type: number
        - name: pageSize
          in: query
          description: Use to pagination, default pageSize = 6
          required: false
          explode: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
        '400':
          description: Error while get movies by genres
  /home/headers:
    get:
      tags:
        - home
      summary: Get nations and genres disctinct for header
      description: Get list genres and movies of genre
      responses:
        '200':
          description: successful operation
        '500':
          description: Server Error
  /home/genres/{genreId}:
    get:
      tags:
        - home
      summary: Get movies by genre
      description: Get list genres and movies of genre
      operationId: findMoviesByGenre
      parameters:
        - name: genreId
          in: path
          description: Enter value to search by title and discription of movies
          required: true
          explode: true
          schema:
            type: number
        - name: page
          in: query
          description: Use to pagination, default page = 1
          required: false
          explode: true
          schema:
            type: number
        - name: pageSize
          in: query
          description: Use to pagination, default pageSize = 6
          required: false
          explode: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Error while get movies by genres
  /movies/home/trending:
    get:
      tags:
        - home
      summary: Get movies trending
      description: Get moives trending for home
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Error while get movies trending

  /movies/home/recommend:
    get:
      tags:
        - home
      summary: Get movies recommender for user
      description: Get moives recommender for user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Error while get movies recommender

  /movies/home/upcoming:
    get:
      tags:
        - home
      summary: Get movies upcoming
      description: Get moives upcoming
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Error while get movies recommender

  /movies/home/vip:
    get:
      tags:
        - home
      summary: Get movies for user vip
      description: Get moives for user vip
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Error while get movies recommender

  /user/get-all-users:
    get:
      summary: Get all users
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Number of items per page
          required: true
          schema:
            type: integer
      tags:
        - user
      responses:
        '200':
          description: Successful response

  /user/get-user:
    get:
      summary: Get user by username, email, or userId
      tags:
        - user
      parameters:
        - name: username
          in: query
          description: Username of the user
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: Email of the user
          required: false
          schema:
            type: string
        - name: userId
          in: query
          description: ID of the user
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /user/get-self-information:
    get:
      summary: Get information about the authenticated user
      tags:
        - user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response

  /user/update-user:
    put:
      summary: Update user information
      tags:
        - user
      security:
        - bearerAuth: []
      requestBody:
        description: User data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful response

  /user/create-user:
    post:
      summary: Create a new user
      tags:
        - user
      requestBody:
        description: User data for registration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '200':
          description: Successful response

  /user/delete-user:
    delete:
      summary: Delete a user by userId
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: query
          description: ID of the user to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /user/add-favorite-movie:
    get:
      summary: Add a movie to the favorites
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: movieId
          in: query
          description: ID of the movie to add to favorites
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /user/delete-favorite-movie:
    delete:
      summary: Remove a movie from the favorites
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: movieId
          in: query
          description: ID of the movie to remove from favorites
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /user/get-favorite-movie-list:
    get:
      summary: Get the list of favorite movies
      tags:
        - user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response

  /user/add-watch-list:
    get:
      summary: Add a movie to the watch list
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: movieId
          in: query
          description: ID of the movie to add to watch list
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /user/delete-watch-list:
    delete:
      summary: Remove a movie from the watch list
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: movieId
          in: query
          description: ID of the movie to remove from watch list
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /user/get-watch-movie-list:
    get:
      summary: Get the watch list
      tags:
        - user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response

  /user/add-movie-history:
    get:
      summary: Add a movie to the watch history
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: episodeId
          in: query
          description: ID of the episode to add to watch history
          required: true
          schema:
            type: integer
        - name: duration
          in: query
          description: Duration of the movie in minutes
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /user/delete-movie-history:
    delete:
      summary: Remove a movie from the watch history
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: episodeId
          in: query
          description: ID of the episode to remove from watch history
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /user/get-movie-history-list:
    get:
      summary: Get the watch history list
      tags:
        - user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response

  /user/get-movie-history:
    get:
      summary: Get the watch history for a specific movie
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: movieId
          in: query
          description: ID of the movie to get watch history
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response

  /subscription/update-subscription:
    put:
      tags:
        - subscription
      summary: Update Subscription cách sử dụng  nếu truyền chỉ một mình subscriptionInfoId thì là cập nhật theo gói (có nó thì chỉ có mình nó truyền vào), closeAt và subscriptionTypeId thì truyền về cái nào sửa cái đấy, userId bắt buộc
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subscriptionTypeId:
                  type: integer
                userId:
                  type: integer
                closeAt:
                  type: string
                  format: date-time
                subscriptionInfoId:
                  type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: Ok!
                message: Successfully

  /subscription/create-subscription-type:
    post:
      tags:
        - subscription
      summary: Create Subscription Type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: Ok!
                message: Successfully

  /subscription/update-subscription-type:
    put:
      tags:
        - subscription
      summary: Update Subscription Type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                subscriptionTypeId:
                  type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: Ok!
                message: Successfully

  /subscription/get-all-subscription-type:
    get:
      tags:
        - subscription
      summary: Get All Subscription Types
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: Ok!
                message: Successfully
                data: []

  /subscription/delete-subscription-type:
    delete:
      tags:
        - subscription
      summary: Delete Subscription Type
      parameters:
        - name: subscriptionTypeId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: Ok!
                message: Successfully

  /subscription/create-subscription-info:
    post:
      tags:
        - subscription
      summary: Create Subscription Type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subscriptionTypeId:
                  type: number
                durationId:
                  type: number
                discount:
                  type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: Ok!
                message: Successfully

  /subscription/update-subscription-info:
    put:
      tags:
        - subscription
      summary: Update Subscription Info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subscriptionTypeId:
                  type: number
                durationId:
                  type: number
                discount:
                  type: number
                subscriptionInfoId:
                  type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: Ok!
                message: Successfully

  /subscription/get-all-subscription-info:
    get:
      tags:
        - subscription
      summary: Get All Subscription Info
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: Ok!
                message: Successfully
                data: []

  /subscription/delete-subscription-info:
    delete:
      tags:
        - subscription
      summary: Delete Subscription Info
      parameters:
        - name: subscriptionInfoId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: Ok!
                message: Successfully

  '/statisticals/getRevenue':
    get:
      tags:
        - statistical
      summary: Get revenue statistical
      description: Get revenue statistical by day, week, month, year or payment type
      parameters:
        - name: startDate
          in: query
          required: false
          schema:
            type: string
          description: Start date
          example: 2020-01-01
        - name: endDate
          in: query
          required: false
          schema:
            type: string
          description: End date
          example: 2024-01-01
        - name: userId
          in: query
          required: false
          schema:
            type: number
          description: userId
        - name: statisBy
          in: query
          required: false
          description: statistical by day, week, month, year, paymentType
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - day
                - week
                - year
                - month
                - paymentType
      operationId: getRevenueStatistics
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found
      security:
        - api_key: []
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: integer
        email:
          type: string
        dateOfBirth:
          type: string
        gender:
          type: string
        username:
          type: string

    UserRegistration:
      type: object
      properties:
        email:
          type: string
        dateOfBirth:
          type: string
        gender:
          type: string
        username:
          type: string
        password:
          type: string

    UserCredentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    Movie:
      type: object
      properties:
        movieId:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        releaseDate:
          type: string
          format: date-time
        nation:
          type: string
          format: string
        posterURL:
          type: string
          format: string
        trailerURL:
          type: string
          format: string
        backgroundURL:
          type: string
          format: string
        averageRating:
          type: number
        episodeNum:
          type: number
        level:
          type: number
          enum:
            - 0
            - 1
            - 2
            - 3
        isSeries:
          type: boolean
          default: false
        numFavorite:
          type: number
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category

    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    api_key:
      type: apiKey
      in: header
      name: Authorization
